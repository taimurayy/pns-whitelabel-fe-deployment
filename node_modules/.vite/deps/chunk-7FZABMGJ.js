import {
  createSimplePaletteValueFilter,
  init_createSimplePaletteValueFilter
} from "./chunk-5TYHEKRA.js";
import {
  init_memoTheme,
  memoTheme
} from "./chunk-UZ7Y34JZ.js";
import {
  init_DefaultPropsProvider,
  useDefaultProps
} from "./chunk-BQ7CLTMW.js";
import {
  init_zero_styled,
  internal_createExtendSxProp
} from "./chunk-Q34GNI6E.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-TT3J3QQE.js";
import {
  styled_default
} from "./chunk-3MTY6MF2.js";
import {
  clsx_default,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_clsx,
  init_composeClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses
} from "./chunk-7P3FFUSY.js";
import {
  require_prop_types
} from "./chunk-J4LPPHPF.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __esm,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/material/Typography/typographyClasses.js
function getTypographyUtilityClass(slot) {
  return generateUtilityClass("MuiTypography", slot);
}
var typographyClasses, typographyClasses_default;
var init_typographyClasses = __esm({
  "node_modules/@mui/material/Typography/typographyClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    typographyClasses = generateUtilityClasses("MuiTypography", ["root", "h1", "h2", "h3", "h4", "h5", "h6", "subtitle1", "subtitle2", "body1", "body2", "inherit", "button", "caption", "overline", "alignLeft", "alignRight", "alignCenter", "alignJustify", "noWrap", "gutterBottom", "paragraph"]);
    typographyClasses_default = typographyClasses;
  }
});

// node_modules/@mui/material/Typography/Typography.js
var React, import_prop_types, import_jsx_runtime, v6Colors, extendSxProp, useUtilityClasses, TypographyRoot, defaultVariantMapping, Typography, Typography_default;
var init_Typography = __esm({
  "node_modules/@mui/material/Typography/Typography.js"() {
    "use client";
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_capitalize();
    init_createSimplePaletteValueFilter();
    init_typographyClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    v6Colors = {
      primary: true,
      secondary: true,
      error: true,
      info: true,
      success: true,
      warning: true,
      textPrimary: true,
      textSecondary: true,
      textDisabled: true
    };
    extendSxProp = internal_createExtendSxProp();
    useUtilityClasses = (ownerState) => {
      const {
        align,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        classes
      } = ownerState;
      const slots = {
        root: ["root", variant, ownerState.align !== "inherit" && `align${capitalize_default(align)}`, gutterBottom && "gutterBottom", noWrap && "noWrap", paragraph && "paragraph"]
      };
      return composeClasses(slots, getTypographyUtilityClass, classes);
    };
    TypographyRoot = styled_default("span", {
      name: "MuiTypography",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, ownerState.variant && styles[ownerState.variant], ownerState.align !== "inherit" && styles[`align${capitalize_default(ownerState.align)}`], ownerState.noWrap && styles.noWrap, ownerState.gutterBottom && styles.gutterBottom, ownerState.paragraph && styles.paragraph];
      }
    })(memoTheme(({
      theme
    }) => {
      var _a;
      return {
        margin: 0,
        variants: [{
          props: {
            variant: "inherit"
          },
          style: {
            // Some elements, like <button> on Chrome have default font that doesn't inherit, reset this.
            font: "inherit",
            lineHeight: "inherit",
            letterSpacing: "inherit"
          }
        }, ...Object.entries(theme.typography).filter(([variant, value]) => variant !== "inherit" && value && typeof value === "object").map(([variant, value]) => ({
          props: {
            variant
          },
          style: value
        })), ...Object.entries(theme.palette).filter(createSimplePaletteValueFilter()).map(([color]) => ({
          props: {
            color
          },
          style: {
            color: (theme.vars || theme).palette[color].main
          }
        })), ...Object.entries(((_a = theme.palette) == null ? void 0 : _a.text) || {}).filter(([, value]) => typeof value === "string").map(([color]) => ({
          props: {
            color: `text${capitalize_default(color)}`
          },
          style: {
            color: (theme.vars || theme).palette.text[color]
          }
        })), {
          props: ({
            ownerState
          }) => ownerState.align !== "inherit",
          style: {
            textAlign: "var(--Typography-textAlign)"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.noWrap,
          style: {
            overflow: "hidden",
            textOverflow: "ellipsis",
            whiteSpace: "nowrap"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.gutterBottom,
          style: {
            marginBottom: "0.35em"
          }
        }, {
          props: ({
            ownerState
          }) => ownerState.paragraph,
          style: {
            marginBottom: 16
          }
        }]
      };
    }));
    defaultVariantMapping = {
      h1: "h1",
      h2: "h2",
      h3: "h3",
      h4: "h4",
      h5: "h5",
      h6: "h6",
      subtitle1: "h6",
      subtitle2: "h6",
      body1: "p",
      body2: "p",
      inherit: "p"
    };
    Typography = React.forwardRef(function Typography2(inProps, ref) {
      const {
        color,
        ...themeProps
      } = useDefaultProps({
        props: inProps,
        name: "MuiTypography"
      });
      const isSxColor = !v6Colors[color];
      const props = extendSxProp({
        ...themeProps,
        ...isSxColor && {
          color
        }
      });
      const {
        align = "inherit",
        className,
        component,
        gutterBottom = false,
        noWrap = false,
        paragraph = false,
        variant = "body1",
        variantMapping = defaultVariantMapping,
        ...other
      } = props;
      const ownerState = {
        ...props,
        align,
        color,
        className,
        component,
        gutterBottom,
        noWrap,
        paragraph,
        variant,
        variantMapping
      };
      const Component = component || (paragraph ? "p" : variantMapping[variant] || defaultVariantMapping[variant]) || "span";
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime.jsx)(TypographyRoot, {
        as: Component,
        ref,
        className: clsx_default(classes.root, className),
        ...other,
        ownerState,
        style: {
          ...align !== "inherit" && {
            "--Typography-textAlign": align
          },
          ...other.style
        }
      });
    });
    true ? Typography.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * Set the text-align on the component.
       * @default 'inherit'
       */
      align: import_prop_types.default.oneOf(["center", "inherit", "justify", "left", "right"]),
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       */
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["primary", "secondary", "success", "error", "info", "warning", "textPrimary", "textSecondary", "textDisabled"]), import_prop_types.default.string]),
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types.default.elementType,
      /**
       * If `true`, the text will have a bottom margin.
       * @default false
       */
      gutterBottom: import_prop_types.default.bool,
      /**
       * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
       *
       * Note that text overflow can only happen with block or inline-block level elements
       * (the element needs to have a width in order to overflow).
       * @default false
       */
      noWrap: import_prop_types.default.bool,
      /**
       * If `true`, the element will be a paragraph element.
       * @default false
       * @deprecated Use the `component` prop instead. This prop will be removed in v7. See [Migrating from deprecated APIs](https://mui.com/material-ui/migration/migrating-from-deprecated-apis/) for more details.
       */
      paragraph: import_prop_types.default.bool,
      /**
       * @ignore
       */
      style: import_prop_types.default.object,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      /**
       * Applies the theme typography styles.
       * @default 'body1'
       */
      variant: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["body1", "body2", "button", "caption", "h1", "h2", "h3", "h4", "h5", "h6", "inherit", "overline", "subtitle1", "subtitle2"]), import_prop_types.default.string]),
      /**
       * The component maps the variant prop to a range of different HTML element types.
       * For instance, subtitle1 to `<h6>`.
       * If you wish to change that mapping, you can provide your own.
       * Alternatively, you can use the `component` prop.
       * @default {
       *   h1: 'h1',
       *   h2: 'h2',
       *   h3: 'h3',
       *   h4: 'h4',
       *   h5: 'h5',
       *   h6: 'h6',
       *   subtitle1: 'h6',
       *   subtitle2: 'h6',
       *   body1: 'p',
       *   body2: 'p',
       *   inherit: 'p',
       * }
       */
      variantMapping: import_prop_types.default.object
    } : void 0;
    Typography_default = Typography;
  }
});

// node_modules/@mui/material/Typography/index.js
var init_Typography2 = __esm({
  "node_modules/@mui/material/Typography/index.js"() {
    init_Typography();
    init_typographyClasses();
    init_typographyClasses();
  }
});

export {
  getTypographyUtilityClass,
  typographyClasses_default,
  Typography_default,
  init_Typography2 as init_Typography
};
//# sourceMappingURL=chunk-7FZABMGJ.js.map
