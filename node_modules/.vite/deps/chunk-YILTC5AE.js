import {
  init_ListItemText,
  listItemTextClasses_default
} from "./chunk-ZXF2UNYH.js";
import {
  init_ListItemIcon,
  listItemIconClasses_default
} from "./chunk-Z6S52MLZ.js";
import {
  dividerClasses_default,
  init_Divider
} from "./chunk-YCEPNSGL.js";
import {
  ListContext_default,
  init_ListContext
} from "./chunk-5UFV3HPL.js";
import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-4I5YR7XD.js";
import {
  init_useEnhancedEffect,
  useEnhancedEffect_default
} from "./chunk-CWXALJEM.js";
import {
  init_useForkRef,
  useForkRef_default
} from "./chunk-FCLAYL7P.js";
import {
  init_memoTheme,
  memoTheme
} from "./chunk-UZ7Y34JZ.js";
import {
  init_DefaultPropsProvider,
  useDefaultProps
} from "./chunk-AKUFVQKH.js";
import {
  init_zero_styled
} from "./chunk-P3RPCGSF.js";
import {
  init_rootShouldForwardProp,
  rootShouldForwardProp_default,
  styled_default
} from "./chunk-OLBX2TLL.js";
import {
  alpha,
  init_colorManipulator
} from "./chunk-A55P2ZAK.js";
import {
  clsx_default,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_clsx,
  init_composeClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses
} from "./chunk-7P3FFUSY.js";
import {
  require_prop_types
} from "./chunk-J4LPPHPF.js";
import {
  require_jsx_runtime
} from "./chunk-OT5EQO2H.js";
import {
  require_react
} from "./chunk-OU5AQDZK.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-EWTE5DHJ.js";

// node_modules/@mui/material/MenuItem/menuItemClasses.js
function getMenuItemUtilityClass(slot) {
  return generateUtilityClass("MuiMenuItem", slot);
}
var menuItemClasses, menuItemClasses_default;
var init_menuItemClasses = __esm({
  "node_modules/@mui/material/MenuItem/menuItemClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    menuItemClasses = generateUtilityClasses("MuiMenuItem", ["root", "focusVisible", "dense", "disabled", "divider", "gutters", "selected"]);
    menuItemClasses_default = menuItemClasses;
  }
});

// node_modules/@mui/material/MenuItem/MenuItem.js
var React, import_prop_types, import_jsx_runtime, overridesResolver, useUtilityClasses, MenuItemRoot, MenuItem, MenuItem_default;
var init_MenuItem = __esm({
  "node_modules/@mui/material/MenuItem/MenuItem.js"() {
    "use client";
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_colorManipulator();
    init_rootShouldForwardProp();
    init_zero_styled();
    init_memoTheme();
    init_DefaultPropsProvider();
    init_ListContext();
    init_ButtonBase();
    init_useEnhancedEffect();
    init_useForkRef();
    init_Divider();
    init_ListItemIcon();
    init_ListItemText();
    init_menuItemClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    overridesResolver = (props, styles) => {
      const {
        ownerState
      } = props;
      return [styles.root, ownerState.dense && styles.dense, ownerState.divider && styles.divider, !ownerState.disableGutters && styles.gutters];
    };
    useUtilityClasses = (ownerState) => {
      const {
        disabled,
        dense,
        divider,
        disableGutters,
        selected,
        classes
      } = ownerState;
      const slots = {
        root: ["root", dense && "dense", disabled && "disabled", !disableGutters && "gutters", divider && "divider", selected && "selected"]
      };
      const composedClasses = composeClasses(slots, getMenuItemUtilityClass, classes);
      return {
        ...classes,
        ...composedClasses
      };
    };
    MenuItemRoot = styled_default(ButtonBase_default, {
      shouldForwardProp: (prop) => rootShouldForwardProp_default(prop) || prop === "classes",
      name: "MuiMenuItem",
      slot: "Root",
      overridesResolver
    })(memoTheme(({
      theme
    }) => ({
      ...theme.typography.body1,
      display: "flex",
      justifyContent: "flex-start",
      alignItems: "center",
      position: "relative",
      textDecoration: "none",
      minHeight: 48,
      paddingTop: 6,
      paddingBottom: 6,
      boxSizing: "border-box",
      whiteSpace: "nowrap",
      "&:hover": {
        textDecoration: "none",
        backgroundColor: (theme.vars || theme).palette.action.hover,
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: "transparent"
        }
      },
      [`&.${menuItemClasses_default.selected}`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity),
        [`&.${menuItemClasses_default.focusVisible}`]: {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.focusOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.focusOpacity)
        }
      },
      [`&.${menuItemClasses_default.selected}:hover`]: {
        backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / calc(${theme.vars.palette.action.selectedOpacity} + ${theme.vars.palette.action.hoverOpacity}))` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity + theme.palette.action.hoverOpacity),
        // Reset on touch devices, it doesn't add specificity
        "@media (hover: none)": {
          backgroundColor: theme.vars ? `rgba(${theme.vars.palette.primary.mainChannel} / ${theme.vars.palette.action.selectedOpacity})` : alpha(theme.palette.primary.main, theme.palette.action.selectedOpacity)
        }
      },
      [`&.${menuItemClasses_default.focusVisible}`]: {
        backgroundColor: (theme.vars || theme).palette.action.focus
      },
      [`&.${menuItemClasses_default.disabled}`]: {
        opacity: (theme.vars || theme).palette.action.disabledOpacity
      },
      [`& + .${dividerClasses_default.root}`]: {
        marginTop: theme.spacing(1),
        marginBottom: theme.spacing(1)
      },
      [`& + .${dividerClasses_default.inset}`]: {
        marginLeft: 52
      },
      [`& .${listItemTextClasses_default.root}`]: {
        marginTop: 0,
        marginBottom: 0
      },
      [`& .${listItemTextClasses_default.inset}`]: {
        paddingLeft: 36
      },
      [`& .${listItemIconClasses_default.root}`]: {
        minWidth: 36
      },
      variants: [{
        props: ({
          ownerState
        }) => !ownerState.disableGutters,
        style: {
          paddingLeft: 16,
          paddingRight: 16
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.divider,
        style: {
          borderBottom: `1px solid ${(theme.vars || theme).palette.divider}`,
          backgroundClip: "padding-box"
        }
      }, {
        props: ({
          ownerState
        }) => !ownerState.dense,
        style: {
          [theme.breakpoints.up("sm")]: {
            minHeight: "auto"
          }
        }
      }, {
        props: ({
          ownerState
        }) => ownerState.dense,
        style: {
          minHeight: 32,
          // https://m2.material.io/components/menus#specs > Dense
          paddingTop: 4,
          paddingBottom: 4,
          ...theme.typography.body2,
          [`& .${listItemIconClasses_default.root} svg`]: {
            fontSize: "1.25rem"
          }
        }
      }]
    })));
    MenuItem = React.forwardRef(function MenuItem2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiMenuItem"
      });
      const {
        autoFocus = false,
        component = "li",
        dense = false,
        divider = false,
        disableGutters = false,
        focusVisibleClassName,
        role = "menuitem",
        tabIndex: tabIndexProp,
        className,
        ...other
      } = props;
      const context = React.useContext(ListContext_default);
      const childContext = React.useMemo(() => ({
        dense: dense || context.dense || false,
        disableGutters
      }), [context.dense, dense, disableGutters]);
      const menuItemRef = React.useRef(null);
      useEnhancedEffect_default(() => {
        if (autoFocus) {
          if (menuItemRef.current) {
            menuItemRef.current.focus();
          } else if (true) {
            console.error("MUI: Unable to set focus to a MenuItem whose component has not been rendered.");
          }
        }
      }, [autoFocus]);
      const ownerState = {
        ...props,
        dense: childContext.dense,
        divider,
        disableGutters
      };
      const classes = useUtilityClasses(props);
      const handleRef = useForkRef_default(menuItemRef, ref);
      let tabIndex;
      if (!props.disabled) {
        tabIndex = tabIndexProp !== void 0 ? tabIndexProp : -1;
      }
      return (0, import_jsx_runtime.jsx)(ListContext_default.Provider, {
        value: childContext,
        children: (0, import_jsx_runtime.jsx)(MenuItemRoot, {
          ref: handleRef,
          role,
          tabIndex,
          component,
          focusVisibleClassName: clsx_default(classes.focusVisible, focusVisibleClassName),
          className: clsx_default(classes.root, className),
          ...other,
          ownerState,
          classes
        })
      });
    });
    true ? MenuItem.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * If `true`, the list item is focused during the first mount.
       * Focus will also be triggered if the value changes from false to true.
       * @default false
       */
      autoFocus: import_prop_types.default.bool,
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The component used for the root node.
       * Either a string to use a HTML element or a component.
       */
      component: import_prop_types.default.elementType,
      /**
       * If `true`, compact vertical padding designed for keyboard and mouse input is used.
       * The prop defaults to the value inherited from the parent Menu component.
       * @default false
       */
      dense: import_prop_types.default.bool,
      /**
       * @ignore
       */
      disabled: import_prop_types.default.bool,
      /**
       * If `true`, the left and right padding is removed.
       * @default false
       */
      disableGutters: import_prop_types.default.bool,
      /**
       * If `true`, a 1px light border is added to the bottom of the menu item.
       * @default false
       */
      divider: import_prop_types.default.bool,
      /**
       * This prop can help identify which element has keyboard focus.
       * The class name will be applied when the element gains the focus through keyboard interaction.
       * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
       * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/HEAD/explainer.md).
       * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
       * if needed.
       */
      focusVisibleClassName: import_prop_types.default.string,
      /**
       * @ignore
       */
      role: import_prop_types.default.string,
      /**
       * If `true`, the component is selected.
       * @default false
       */
      selected: import_prop_types.default.bool,
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      /**
       * @default 0
       */
      tabIndex: import_prop_types.default.number
    } : void 0;
    MenuItem_default = MenuItem;
  }
});

// node_modules/@mui/material/MenuItem/index.js
var MenuItem_exports = {};
__export(MenuItem_exports, {
  default: () => MenuItem_default,
  getMenuItemUtilityClass: () => getMenuItemUtilityClass,
  menuItemClasses: () => menuItemClasses_default
});
var init_MenuItem2 = __esm({
  "node_modules/@mui/material/MenuItem/index.js"() {
    init_MenuItem();
    init_menuItemClasses();
    init_menuItemClasses();
  }
});

export {
  getMenuItemUtilityClass,
  menuItemClasses_default,
  MenuItem_default,
  MenuItem_exports,
  init_MenuItem2 as init_MenuItem
};
//# sourceMappingURL=chunk-YILTC5AE.js.map
